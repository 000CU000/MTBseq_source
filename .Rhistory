hae<-which(Zusammenfassung_gut$SNP==1 & Zusammenfassung_gut$`p-value`>0.166)
hae<-which(Zusammenfassung_gut$`p-value`>0.166 & Zusammenfassung_gut$SNP==1)
hae<-which(Zusammenfassung_gut$pred_opt == "FN")
v2 <- rep(NA, nrow(Zusammenfassung_klein))
v2 <- ifelse(Zusammenfassung_klein$`p-value` <= 0.05 & Zusammenfassung_klein$SNP == 1, "TP", v2)
v2 <- ifelse(Zusammenfassung_klein$`p-value` <= 0.05 & Zusammenfassung_klein$SNP == 0, "FP", v2)
v2 <- ifelse(Zusammenfassung_klein$`p-value` > 0.05 & Zusammenfassung_klein$SNP == 1, "FN", v2)
v2 <- ifelse(Zusammenfassung_klein$`p-value` > 0.05 & Zusammenfassung_klein$SNP == 0, "TN", v2)
v3 <- rep(NA, nrow(Zusammenfassung_klein))
v3 <- ifelse(Zusammenfassung_klein$`p-value` <= 0.166 & Zusammenfassung_klein$SNP == 1, "TP", v3)
v3 <- ifelse(Zusammenfassung_klein$`p-value` <= 0.166 & Zusammenfassung_klein$SNP == 0, "FP", v3)
v3 <- ifelse(Zusammenfassung_klein$`p-value` > 0.166 & Zusammenfassung_klein$SNP == 1, "FN", v3)
v3 <- ifelse(Zusammenfassung_klein$`p-value` > 0.166 & Zusammenfassung_klein$SNP == 0, "TN", v3)
Zusammenfassung_klein$pred_type <- v2
Zusammenfassung_klein$pred_opt <- v3
Zusammenfassung_gut<-Zusammenfassung_klein[which(Zusammenfassung_klein$`#ALT`>0),]
Zusammenfassung_gut$tCOV<-as.factor(Zusammenfassung_gut$tCOV)
Zusammenfassung_gut$tFreq<-as.factor(Zusammenfassung_gut$tFreq)
hae<-which(Zusammenfassung_gut$pred_opt == "FN")
FN<-which(Zusammenfassung_gut$pred_opt == "FN")
falsch<-Zusammenfassung_gut[FN,] #57
fuenfzig<-which(falsch$tCOV == "50") #59
hundert<-which(falsch$tCOV =="100") #57
dreihundert<-which(falsch$tCOV =="300") #
fuenfhundert<-which(falsch$tCOV =="500") #
eins<-which(falsch$tFreq == "1") #47
zwei<-which(falsch$tFreq == "2") #31
drei<-which(falsch$tFreq == "3") #18
fuenf<-which(falsch$tFreq == "5") #
sieben<-which(falsch$tFreq == "7") #
sieben
f<-which(falsch$tFreq == "20")
f<-which(falsch$tFreq == "15")
FP<-which(Zusammenfassung_gut$pred_opt == "FP")
FP<-which(Zusammenfassung_gut$pred_type == "FP")
FN<-which(Zusammenfassung_gut$pred_type == "FN")
FN<-which(Zusammenfassung_gut$pred_type == "TN") #
TN<-which(Zusammenfassung_gut$pred_type == "TN") #
FN<-which(Zusammenfassung_gut$pred_type == "FN") #108
TN<-which(Zusammenfassung_gut$pred_type == "TN") #
TP<-which(Zusammenfassung_gut$pred_type == "TP")
FP<-which(Zusammenfassung_gut$pred_type == "FP")
FN<-which(Zusammenfassung_gut$pred_opt == "FN")
TN<-which(Zusammenfassung_gut$pred_opt == "TN") #60460
TP<-which(Zusammenfassung_gut$pred_opt == "TP") #
FP<-which(Zusammenfassung_gut$pred_opt == "FP") #
library("epiR", lib.loc="~/R/win-library/3.1")
p_s <- as.table(matrix(c(60460,108,402,1042), nrow = 2, byrow = TRUE))
p_s
rval <- epi.tests(p_s, conf.level = 0.95)
summary(rval)
rval
p_s <- as.table(matrix(c(1042,402,108,60460), nrow = 2, byrow = TRUE))
rval <- epi.tests(p_s, conf.level = 0.95)
rval
p_g <- as.table(matrix(c(1093,3630,57,57232), nrow = 2, byrow = TRUE))
rval <- epi.tests(p_g, conf.level = 0.95)
rval
Cov50<-Zusammenfassung_gut[which(Zusammenfassung_gut$tCOV==50),]
Cov50<-Zusammenfassung_gut[which(Zusammenfassung_gut$tCOV==50),]
Cov100<-Zusammenfassung_gut[which(Zusammenfassung_gut$tCOV==100),]
Cov300<-Zusammenfassung_gut[which(Zusammenfassung_gut$tCOV==300),]
Cov500<-Zusammenfassung_gut[which(Zusammenfassung_gut$tCOV==500),]
Freq1<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==1),]
Freq1<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==1),]
Freq2<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==2),]
Freq3<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==3),]
Freq5<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==5),]
Freq7<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==7),]
Freq10<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==10),]
Freq15<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==15),]
Freq20<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==20),]
Freq25<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==25),]
Freq30<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==30),]
boxplot(Freq1$pred_type)
boxplot(Freq1$tCOV)
hist(Freq1$pred_type)
plot(Freq1$pred_type)
plot.factor(Zusammenfassung_gut$pred_type)
install.packages("graphics")
install.packages("graphics")
install.packages("graphics")
install.packages("graphics")
install.packages("graphics")
plot.factor(Zusammenfassung_gut$pred_type)
plot(Zusammenfassung_gut$pred_type)
EMB <- read_excel("C:/Users/viola/Doktorarbeit/Dissertation/Sens_Spez_R.xlsx", sheet="EMB")
EMB$value<-as.numeric(EMB$value)
library("readxl", lib.loc="~/R/win-library/3.1")
EMB <- read_excel("C:/Users/viola/Doktorarbeit/Dissertation/Sens_Spez_R.xlsx", sheet="EMB")
EMB$value<-as.numeric(EMB$value)
EMB$lowerI<-as.numeric(EMB$lowerI)
EMB$upperI<-as.numeric(EMB$upperI)
df <- data.frame(x = EMB$value,
y = EMB$Programm,
xmin = EMB$lowerI,
xmax = EMB$upperI,
group = EMB$group
)
str(df)
ggplot(data = df,aes(x = x,y = y, color=group)) +
geom_point(aes(x=x),size=3) +
geom_errorbarh(aes(xmin = xmin,xmax = xmax), height=.3, size=1)+
labs( x = "", y = "")+
scale_colour_discrete(name  =NULL)+
theme(legend.position="bottom")
library(ggplot2)
library(party)
library(pROC)
s
ggplot(data = df,aes(x = x,y = y, color=group)) +
geom_point(aes(x=x),size=3) +
geom_errorbarh(aes(xmin = xmin,xmax = xmax), height=.3, size=1)+
labs( x = "", y = "")+
scale_colour_discrete(name  =NULL)+
theme(legend.position="bottom")
View(INH)
library("readxl", lib.loc="~/R/win-library/3.1")
Zusammenfassung_klein <- read_excel("//10.100.3.40/Thecus_Homes/Thecus_vschleusener/low-frequency/Test_artificial/FastQ-Dateien/Mixe/bamfiles/bamcount_pvalue/bamcount_filtered/EINS/Zusammenfassung_klein.xlsx")
library(ggplot2)
library(party)
library(pROC)
Zusammenfassung_klein$SNP<-as.factor(Zusammenfassung_klein$SNP)
v2 <- rep(NA, nrow(Zusammenfassung_klein))
v2 <- ifelse(Zusammenfassung_klein$`p-value` <= 0.05 & Zusammenfassung_klein$SNP == 1, "TP", v2)
v2 <- ifelse(Zusammenfassung_klein$`p-value` <= 0.05 & Zusammenfassung_klein$SNP == 0, "FP", v2)
v2 <- ifelse(Zusammenfassung_klein$`p-value` > 0.05 & Zusammenfassung_klein$SNP == 1, "FN", v2)
v2 <- ifelse(Zusammenfassung_klein$`p-value` > 0.05 & Zusammenfassung_klein$SNP == 0, "TN", v2)
v3 <- rep(NA, nrow(Zusammenfassung_klein))
v3 <- ifelse(Zusammenfassung_klein$`p-value` <= 0.166 & Zusammenfassung_klein$SNP == 1, "TP", v3)
v3 <- ifelse(Zusammenfassung_klein$`p-value` <= 0.166 & Zusammenfassung_klein$SNP == 0, "FP", v3)
v3 <- ifelse(Zusammenfassung_klein$`p-value` > 0.166 & Zusammenfassung_klein$SNP == 1, "FN", v3)
v3 <- ifelse(Zusammenfassung_klein$`p-value` > 0.166 & Zusammenfassung_klein$SNP == 0, "TN", v3)
Zusammenfassung_klein$pred_type <- v2
Zusammenfassung_klein$pred_opt <- v3
Zusammenfassung_gut<-Zusammenfassung_klein[which(Zusammenfassung_klein$`#ALT`>0),]
Zusammenfassung_gut$tCOV<-as.factor(Zusammenfassung_gut$tCOV)
Zusammenfassung_gut$tFreq<-as.factor(Zusammenfassung_gut$tFreq)
library(gridExtra)
library(SDMTools)
library(ROCR)
Cov50<-Zusammenfassung_gut[which(Zusammenfassung_gut$tCOV==50),]
Cov100<-Zusammenfassung_gut[which(Zusammenfassung_gut$tCOV==100),]
Cov300<-Zusammenfassung_gut[which(Zusammenfassung_gut$tCOV==300),]
Cov500<-Zusammenfassung_gut[which(Zusammenfassung_gut$tCOV==500),]
Freq1<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==1),]
Freq2<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==2),]
Freq3<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==3),]
Freq5<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==5),]
Freq7<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==7),]
Freq10<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==10),]
Freq15<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==15),]
Freq20<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==20),]
Freq25<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==25),]
Freq30<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==30),]
freq<-c(1,2,3,5,7,10,15,20,25,30)
x<-0
werte<-c()
for (i in freq){
x<-x+1;
x1[x]<-length(which(Cov500$tFreq==i & Cov500$pred_type == "TP"));
x2[x]<-length(which(Cov500$tFreq==i & Cov500$SNP == 1));
werte[x]<-x1[x]/x2[x]}
x2<-0
werte<-c()
for (i in freq){
x<-x+1;
x1[x]<-length(which(Cov500$tFreq==i & Cov500$pred_type == "TP"));
x2[x]<-length(which(Cov500$tFreq==i & Cov500$SNP == 1));
werte[x]<-x1[x]/x2[x]}
x1<-c()
x2<-c()
for (i in freq){
x<-x+1;
x1[x]<-length(which(Cov500$tFreq==i & Cov500$pred_type == "TP"));
x2[x]<-length(which(Cov500$tFreq==i & Cov500$SNP == 1));
werte[x]<-x1[x]/x2[x]}
werte
length(which(Cov500$tFreq==1 & Cov500$pred_type == "TP")
)
length(which(Cov500$tFreq==1 & Cov500$SNP == 1))
23/30
x<-0
x1<-c()
x2<-c()
werte<-c()
for (i in freq){
x<-x+1;
x1[x]<-length(which(Cov500$tFreq==i & Cov500$pred_type == "TP"));
x2[x]<-length(which(Cov500$tFreq==i & Cov500$SNP == 1));
werte[x]<-x1[x]/x2[x]}
werte
werteCov500<-werte
x<-0
x1<-c()
x2<-c()
werte<-c()
for (i in freq){
x<-x+1;
x1[x]<-length(which(Cov300$tFreq==i & Cov500$pred_type == "TP"));
x2[x]<-length(which(Cov300$tFreq==i & Cov500$SNP == 1));
werte[x]<-x1[x]/x2[x]}
werteCov300<-werte
warnings()
x<-0
x1<-c()
x2<-c()
werte<-c()
for (i in freq){
x<-x+1;
x1[x]<-length(which(Cov300$tFreq==i & Cov300$pred_type == "TP"));
x2[x]<-length(which(Cov300$tFreq==i & Cov300$SNP == 1));
werte[x]<-x1[x]/x2[x]}
werteCov300<-werte
x<-0
x1<-c()
x2<-c()
werte<-c()
for (i in freq){
x<-x+1;
x1[x]<-length(which(Cov100$tFreq==i & Cov100$pred_type == "TP"));
x2[x]<-length(which(Cov100$tFreq==i & Cov100$SNP == 1));
werte[x]<-x1[x]/x2[x]}
werteCov100<-werte
x<-0
x1<-c()
x2<-c()
werte<-c()
for (i in freq){
x<-x+1;
x1[x]<-length(which(Cov50$tFreq==i & Cov50$pred_type == "TP"));
x2[x]<-length(which(Cov50$tFreq==i & Cov50$SNP == 1));
werte[x]<-x1[x]/x2[x]}
werteCov50<-werte
Werte<-cbind(werteCov50, werteCov100, werteCov300, werteCov500)
row.names(Werte)<-c("Freq1", "Freq2", "Freq3", "Freq5", "Freq7", "Freq10", "Freq15", "Freq20", "Freq25", "Freq30")
colnames(Werte)<-c("Cov50", "Cov100", "Cov300", "Cov500")
barplot(Werte,col=brewer.pal(n = 10, name = "Spectral"), border="white", font.axis=2, beside=T, legend=rownames(Werte),args.legend = list(x=35,y=-0.1,ncol=5), ylab="Frequency of true positives", font.lab=2)
barplot(werte2,col=brewer.pal(n = 4, name = "BuPu"), border="white", ylim=c(0,1), xlab="Coverage", font.axis=2, beside=T, legend=rownames(werte2), ylab="Frequency", font.lab=2)
library("RColorBrewer")
barplot(werte2,col=brewer.pal(n = 4, name = "BuPu"), border="white", ylim=c(0,1), xlab="Coverage", font.axis=2, beside=T, legend=rownames(werte2), ylab="Frequency", font.lab=2)
barplot(Werte,col=brewer.pal(n = 10, name = "Spectral"), border="white", font.axis=2, beside=T, legend=rownames(Werte),args.legend = list(x=35,y=-0.1,ncol=5), ylab="Frequency of true positives", font.lab=2)
barplot(Werte,col=brewer.pal(n = 10, name = "Spectral"), border="white", font.axis=2, beside=T, legend=rownames(Werte), ylab="Frequency of true positives", font.lab=2)
barplot(Werte,col=brewer.pal(n = 10, name = "Spectral"), border="white", font.axis=2, beside=T, legend=rownames(Werte), xlab="coverage",args.legend = list(x=35,y=0,ncol=5), ylab="Frequency of true positives", font.lab=2)
barplot(Werte,col=brewer.pal(n = 10, name = "Spectral"), border="white", font.axis=2, beside=T, legend=rownames(Werte), xlab="coverage",args.legend = list(x=35,y=6,ncol=5), ylab="Frequency of true positives", font.lab=2)
barplot(Werte,col=brewer.pal(n = 10, name = "Spectral"), border="white", font.axis=2, beside=T, legend=rownames(Werte), xlab="coverage",args.legend = list(x=35,y=2,ncol=5), ylab="Frequency of true positives", font.lab=2)
barplot(Werte,col=brewer.pal(n = 10, name = "Spectral"), border="white", font.axis=2, beside=T, legend=rownames(Werte), xlab="coverage",args.legend = list(x=35,y=1,ncol=5), ylab="Frequency of true positives", font.lab=2)
barplot(Werte,col=brewer.pal(n = 10, name = "Spectral"), border="white", font.axis=2, beside=T, legend=rownames(Werte), xlab="coverage",args.legend = list(x=35,y=1.2,ncol=5), ylab="Frequency of true positives", font.lab=2)
barplot(Werte,col=brewer.pal(n = 10, name = "Spectral"), border="white", font.axis=2, beside=T, legend=rownames(Werte), xlab="coverage",args.legend = list(x=35,y=1.3,ncol=5), ylab="Frequency of true positives", font.lab=2)
barplot(Werte,col=brewer.pal(n = 10, name = "Spectral"), border="white", font.axis=2, beside=T, legend=rownames(Werte), xlab="coverage",args.legend = list(x=35,y=1.4,ncol=5), ylab="Frequency of true positives", font.lab=2)
barplot(Werte,col=brewer.pal(n = 10, name = "Spectral"), border="white", font.axis=2, beside=T, legend=rownames(Werte), xlab="coverage",args.legend = list(x=35,y=1.5,ncol=5), ylab="Frequency of true positives", font.lab=2)
barplot(Werte,col=brewer.pal(n = 10, name = "Spectral"), border="white", font.axis=2, beside=T, main="", legend=rownames(Werte), xlab="coverage",args.legend = list(x=35,y=1.5,ncol=5), ylab="Frequency of true positives", font.lab=2)
barplot(Werte,col=brewer.pal(n = 10, name = "Spectral"), border="white", font.axis=2, beside=T, main="", legend=rownames(Werte), xlab="coverage",args.legend = list(x=35,y=1,ncol=5), ylab="Frequency of true positives", font.lab=2)
library("readxl", lib.loc="~/R/win-library/3.1")
getwd()
Zusammenfassung <- read_excel("H:/Thecus_Homes/Thecus_vschleusener/low-frequency/Test_artificial/FastQ-Dateien/Mixe/bamfiles/bamcount_pvalue/bamcount_filtered/EINS/Zusammenfassung.xlsx")
Zusammenfassung <- read_excel("H:/Thecus_vschleusener/low-frequency/Test_artificial/FastQ-Dateien/Mixe/bamfiles/bamcount_pvalue/bamcount_filtered/EINS/Zusammenfassung.xlsx")
Zusammenfassung_klein <- read_excel("H:/Thecus_vschleusener/low-frequency/Test_artificial/FastQ-Dateien/Mixe/bamfiles/bamcount_pvalue/bamcount_filtered/EINS/Zusammenfassung_klein.xlsx")
library("RColorBrewer")
library(ggplot2)
library(party)
library(pROC)
Zusammenfassung$SNP<-as.factor(Zusammenfassung$SNP)
Zusammenfassung_klein$SNP<-as.factor(Zusammenfassung_klein$SNP)
v1 <- rep(NA, nrow(Zusammenfassung))
v1 <- ifelse(Zusammenfassung$`p-value` <= 0.05 & Zusammenfassung$SNP == 1, "TP", v1)
v1 <- ifelse(Zusammenfassung$`p-value` <= 0.05 & Zusammenfassung$SNP == 0, "FP", v1)
v1 <- ifelse(Zusammenfassung$`p-value` > 0.05 & Zusammenfassung$SNP == 1, "FN", v1)
v1 <- ifelse(Zusammenfassung$`p-value` > 0.05 & Zusammenfassung$SNP == 0, "TN", v1)
v2 <- rep(NA, nrow(Zusammenfassung_klein))
v2 <- ifelse(Zusammenfassung_klein$`p-value` <= 0.05 & Zusammenfassung_klein$SNP == 1, "TP", v2)
v2 <- ifelse(Zusammenfassung_klein$`p-value` <= 0.05 & Zusammenfassung_klein$SNP == 0, "FP", v2)
v2 <- ifelse(Zusammenfassung_klein$`p-value` > 0.05 & Zusammenfassung_klein$SNP == 1, "FN", v2)
v2 <- ifelse(Zusammenfassung_klein$`p-value` > 0.05 & Zusammenfassung_klein$SNP == 0, "TN", v2)
View(Zusammenfassung_gut)
library(gridExtra)
norm_vec <- function(v) (v - min(v))/diff(range(v))
Cov50<-Zusammenfassung_gut[which(Zusammenfassung_gut$tCOV==50),]
Cov100<-Zusammenfassung_gut[which(Zusammenfassung_gut$tCOV==100),]
Cov300<-Zusammenfassung_gut[which(Zusammenfassung_gut$tCOV==300),]
Cov500<-Zusammenfassung_gut[which(Zusammenfassung_gut$tCOV==500),]
Freq1<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==1),]
Freq2<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==2),]
Freq3<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==3),]
Freq5<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==5),]
Freq7<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==7),]
Freq10<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==10),]
Freq15<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==15),]
Freq20<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==20),]
Freq25<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==25),]
Freq30<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==30),]
plot(Zusammenfassung_gut$pred_type)
View(Zusammenfassung_gut)
str(Zusammenfassung_gut)
Zusammenfassung_gut$pred_type <- v2
Zusammenfassung_gut$tCOV<-as.factor(Zusammenfassung_gut$tCOV)
Zusammenfassung_gut$tFreq<-as.factor(Zusammenfassung_gut$tFreq)
Zusammenfassung_gut$Antibiotic<-as.factor(Zusammenfassung_gut$Antibiotic)
FN<-which(Zusammenfassung_gut$pred_type == "FN") #108
Zusammenfassung_gut$pred_opt<-as.factor(Zusammenfassung_gut$pred_opt)
Zusammenfassung_gut$pred_type<-as.factor(Zusammenfassung_gut$pred_type)
FN<-which(Zusammenfassung_gut$pred_type == "FN") #108
TN<-which(Zusammenfassung_gut$pred_type == "TN") #60460
Cov50<-Zusammenfassung_gut[which(Zusammenfassung_gut$tCOV==50),]
Cov100<-Zusammenfassung_gut[which(Zusammenfassung_gut$tCOV==100),]
Cov300<-Zusammenfassung_gut[which(Zusammenfassung_gut$tCOV==300),]
Cov500<-Zusammenfassung_gut[which(Zusammenfassung_gut$tCOV==500),]
Freq1<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==1),]
Freq2<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==2),]
Freq3<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==3),]
Freq5<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==5),]
Freq7<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==7),]
Freq10<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==10),]
Freq15<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==15),]
Freq20<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==20),]
Freq25<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==25),]
Freq30<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==30),]
plot(Zusammenfassung_gut$pred_type)
barplot(data, col=colors()[c(23,89,12)] , border="white", space=0.04, font.axis=2, xlab="group")
freq<-c(1,2,3,5,7,10,15,20,25,30)
x<-0
x1<-c()
x2<-c()
werte<-c()
for (i in freq){
x<-x+1;
x1[x]<-length(which(Cov500$tFreq==i & Cov500$pred_type == "TP"));
x2[x]<-length(which(Cov500$tFreq==i & Cov500$SNP == 1));
werte[x]<-x1[x]/x2[x]}
werte
werteCov500<-werte
x<-0
x1<-c()
x2<-c()
werte<-c()
for (i in freq){
x<-x+1;
x1[x]<-length(which(Cov300$tFreq==i & Cov300$pred_type == "TP"));
x2[x]<-length(which(Cov300$tFreq==i & Cov300$SNP == 1));
werte[x]<-x1[x]/x2[x]}
werteCov300<-werte
x<-0
x1<-c()
x2<-c()
werte<-c()
for (i in freq){
x<-x+1;
x1[x]<-length(which(Cov100$tFreq==i & Cov100$pred_type == "TP"));
x2[x]<-length(which(Cov100$tFreq==i & Cov100$SNP == 1));
werte[x]<-x1[x]/x2[x]}
werteCov100<-werte
x<-0
x1<-c()
x2<-c()
werte<-c()
for (i in freq){
x<-x+1;
x1[x]<-length(which(Cov50$tFreq==i & Cov50$pred_type == "TP"));
x2[x]<-length(which(Cov50$tFreq==i & Cov50$SNP == 1));
werte[x]<-x1[x]/x2[x]}
werteCov50<-werte
Werte<-cbind(werteCov50, werteCov100, werteCov300, werteCov500)
row.names(Werte)<-c("Freq1", "Freq2", "Freq3", "Freq5", "Freq7", "Freq10", "Freq15", "Freq20", "Freq25", "Freq30")
colnames(Werte)<-c("Cov50", "Cov100", "Cov300", "Cov500")
par(xpd=TRUE)
barplot(Werte,col=brewer.pal(n = 10, name = "Spectral"), border="white", font.axis=2, beside=T, legend=rownames(Werte),args.legend = list(x=35,y=-0.1,ncol=5), ylab="Frequency of true positives", font.lab=2)
barplot(Werte,col=brewer.pal(n = 10, name = "Spectral"), border="white", font.axis=2, beside=T, main="", legend=rownames(Werte), xlab="coverage",args.legend = list(x=35,y=1,ncol=5), ylab="Frequency of true positives", font.lab=2)
werte50<-c(221/264,43/264,3555/3662,107/3662)
werte100<-c(249/288, 39/288, 7382/7596, 214/7596)
werte300<-c(280/298, 18/298, 19536/19599, 63/19599)
werte500<-c(292/300,8/300, 29987/30005, 18/30005)
werte2<-cbind(werte50, werte100,werte300, werte500)
rownames(werte2)<-c("TP", "FN", "TN", "FP")
colnames(werte2)<-c("Cov50", "Cov100", "Cov300", "Cov500")
par(xpd=TRUE)
barplot(werte2,col=brewer.pal(n = 4, name = "BuPu"), border="white", ylim=c(0,1), xlab="Coverage", font.axis=2, beside=T, legend=rownames(werte2), ylab="Frequency", font.lab=2)
legend(1,1,rownames(Werte), fill=T, horiz=T)
par(xpd=TRUE, mfrow(2,1))
par(xpd=TRUE, mfrow=c(2,1))
par(xpd=TRUE, mfrow=c(2,1))
barplot(werte2,col=brewer.pal(n = 4, name = "BuPu"), border="white", ylim=c(0,1), xlab="Coverage", font.axis=2, beside=T, legend=rownames(werte2), ylab="Frequency", font.lab=2)
par(xpd=TRUE)
barplot(werte2,col=brewer.pal(n = 4, name = "BuPu"), border="white", ylim=c(0,1), xlab="Coverage", font.axis=2, beside=T, legend=rownames(werte2), ylab="Frequency", font.lab=2)
par(xpd=TRUE, mfrow=c(1,1))
barplot(werte2,col=brewer.pal(n = 4, name = "BuPu"), border="white", ylim=c(0,1), xlab="Coverage", font.axis=2, beside=T, legend=rownames(werte2), ylab="Frequency", font.lab=2)
barplot(data, col=colors()[c(23,89,12)] , border="white", font.axis=2, beside=T, legend=rownames(data), xlab="group", font.lab=2)
barplot(Werte,col=brewer.pal(n = 10, name = "Spectral"), border="white", font.axis=2, beside=T, legend=rownames(Werte),args.legend = list(x=35,y=-0.1,ncol=5), ylab="Frequency of true positives", font.lab=2)
barplot(Werte,col=brewer.pal(n = 10, name = "Spectral"), border="white", font.axis=2, beside=T, legend=rownames(Werte),args.legend = list(x=35,y=0,ncol=5), ylab="Frequency of true positives", font.lab=2)
barplot(Werte,col=brewer.pal(n = 10, name = "Spectral"), border="white", font.axis=2, beside=T, legend=rownames(Werte),args.legend = list(x=35,y=2,ncol=5), ylab="Frequency of true positives", font.lab=2)
barplot(Werte,col=brewer.pal(n = 10, name = "Spectral"), border="white", font.axis=2, beside=T, legend=rownames(Werte),args.legend = list(x=35,y=1,ncol=5), ylab="Frequency of true positives", font.lab=2)
library("readxl", lib.loc="~/R/win-library/3.1")
Zusammenfassung <- read_excel("H:/Thecus_vschleusener/low-frequency/Test_artificial/FastQ-Dateien/Mixe/bamfiles/bamcount_pvalue/bamcount_filtered/EINS/Zusammenfassung.xlsx")
Zusammenfassung_klein <- read_excel("H:/Thecus_vschleusener/low-frequency/Test_artificial/FastQ-Dateien/Mixe/bamfiles/bamcount_pvalue/bamcount_filtered/EINS/Zusammenfassung_klein.xlsx")
library("RColorBrewer")
library(ggplot2)
library(party)
library(pROC)
Zusammenfassung$SNP<-as.factor(Zusammenfassung$SNP)
Zusammenfassung_klein$SNP<-as.factor(Zusammenfassung_klein$SNP)
v1 <- rep(NA, nrow(Zusammenfassung))
v1 <- ifelse(Zusammenfassung$`p-value` <= 0.05 & Zusammenfassung$SNP == 1, "TP", v1)
v1 <- ifelse(Zusammenfassung$`p-value` <= 0.05 & Zusammenfassung$SNP == 0, "FP", v1)
v1 <- ifelse(Zusammenfassung$`p-value` > 0.05 & Zusammenfassung$SNP == 1, "FN", v1)
v1 <- ifelse(Zusammenfassung$`p-value` > 0.05 & Zusammenfassung$SNP == 0, "TN", v1)
v2 <- rep(NA, nrow(Zusammenfassung_klein))
v2 <- ifelse(Zusammenfassung_klein$`p-value` <= 0.05 & Zusammenfassung_klein$SNP == 1, "TP", v2)
v2 <- ifelse(Zusammenfassung_klein$`p-value` <= 0.05 & Zusammenfassung_klein$SNP == 0, "FP", v2)
v2 <- ifelse(Zusammenfassung_klein$`p-value` > 0.05 & Zusammenfassung_klein$SNP == 1, "FN", v2)
v2 <- ifelse(Zusammenfassung_klein$`p-value` > 0.05 & Zusammenfassung_klein$SNP == 0, "TN", v2)
v3 <- rep(NA, nrow(Zusammenfassung_klein))
v3 <- ifelse(Zusammenfassung_klein$`p-value` <= 0.166 & Zusammenfassung_klein$SNP == 1, "TP", v3)
v3 <- ifelse(Zusammenfassung_klein$`p-value` <= 0.166 & Zusammenfassung_klein$SNP == 0, "FP", v3)
v3 <- ifelse(Zusammenfassung_klein$`p-value` > 0.166 & Zusammenfassung_klein$SNP == 1, "FN", v3)
v3 <- ifelse(Zusammenfassung_klein$`p-value` > 0.166 & Zusammenfassung_klein$SNP == 0, "TN", v3)
Zusammenfassung$pred_type <- v1
Zusammenfassung_klein$pred_type <- v2
Zusammenfassung_klein$pred_opt <- v3
Zusammenfassung_gut<-Zusammenfassung_klein[which(Zusammenfassung_klein$`#ALT`>0),]
library(pROC)
library(Epi)
Zusammenfassung$Antibiotic<-as.factor(Zusammenfassung$Antibiotic)
Zusammenfassung_gut$Antibiotic<-as.factor(Zusammenfassung_gut$Antibiotic)
Zusammenfassung_gut$pred_opt<-as.factor(Zusammenfassung_gut$pred_opt)
Zusammenfassung_gut$pred_type<-as.factor(Zusammenfassung_gut$pred_type)
library("epiR", lib.loc="~/R/win-library/3.1")
Cov50<-Zusammenfassung_gut[which(Zusammenfassung_gut$tCOV==50),]
Cov100<-Zusammenfassung_gut[which(Zusammenfassung_gut$tCOV==100),]
Cov300<-Zusammenfassung_gut[which(Zusammenfassung_gut$tCOV==300),]
Cov500<-Zusammenfassung_gut[which(Zusammenfassung_gut$tCOV==500),]
Freq1<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==1),]
Freq2<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==2),]
Freq3<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==3),]
Freq5<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==5),]
Freq7<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==7),]
Freq10<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==10),]
Freq15<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==15),]
Freq20<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==20),]
Freq25<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==25),]
Freq30<-Zusammenfassung_gut[which(Zusammenfassung_gut$tFreq==30),]
plot(Zusammenfassung_gut$pred_type)
barplot(data, col=colors()[c(23,89,12)] , border="white", space=0.04, font.axis=2, xlab="group")
barplot(data, col=colors()[c(23,89,12)] , border="white", font.axis=2, beside=T, legend=rownames(data), xlab="group", font.lab=2)
set.seed(112)
data=matrix(sample(1:30,15) , nrow=3)
colnames(data)=c("A","B","C","D","E")
rownames(data)=c("var1","var2","var3")
barplot(data, col=colors()[c(23,89,12)] , border="white", space=0.04, font.axis=2, xlab="group")
barplot(data, col=colors()[c(23,89,12)] , border="white", font.axis=2, beside=T, legend=rownames(data), xlab="group", font.lab=2)
freq<-c(1,2,3,5,7,10,15,20,25,30)
x<-0
x1<-c()
x2<-c()
werte<-c()
for (i in freq){
x<-x+1;
x1[x]<-length(which(Cov500$tFreq==i & Cov500$pred_type == "TP"));
x2[x]<-length(which(Cov500$tFreq==i & Cov500$SNP == 1));
werte[x]<-x1[x]/x2[x]}
werteCov500<-werte
x<-0
x1<-c()
x2<-c()
werte<-c()
for (i in freq){
x<-x+1;
x1[x]<-length(which(Cov300$tFreq==i & Cov300$pred_type == "TP"));
x2[x]<-length(which(Cov300$tFreq==i & Cov300$SNP == 1));
werte[x]<-x1[x]/x2[x]}
werteCov300<-werte
x<-0
x1<-c()
x2<-c()
werte<-c()
for (i in freq){
x<-x+1;
x1[x]<-length(which(Cov100$tFreq==i & Cov100$pred_type == "TP"));
x2[x]<-length(which(Cov100$tFreq==i & Cov100$SNP == 1));
werte[x]<-x1[x]/x2[x]}
werteCov100<-werte
x<-0
x1<-c()
x2<-c()
werte<-c()
for (i in freq){
x<-x+1;
x1[x]<-length(which(Cov50$tFreq==i & Cov50$pred_type == "TP"));
x2[x]<-length(which(Cov50$tFreq==i & Cov50$SNP == 1));
werte[x]<-x1[x]/x2[x]}
werteCov50<-werte
Werte<-cbind(werteCov50, werteCov100, werteCov300, werteCov500)
row.names(Werte)<-c("Freq1", "Freq2", "Freq3", "Freq5", "Freq7", "Freq10", "Freq15", "Freq20", "Freq25", "Freq30")
colnames(Werte)<-c("Cov50", "Cov100", "Cov300", "Cov500")
par(xpd=TRUE)
barplot(Werte,col=brewer.pal(n = 10, name = "Spectral"), border="white", font.axis=2, beside=T, legend=rownames(Werte),args.legend = list(x=35,y=1,ncol=5), ylab="Frequency of true positives", font.lab=2)
barplot(Werte,col=brewer.pal(n = 10, name = "Spectral"), border="white", font.axis=2, beside=T, main="", legend=rownames(Werte), xlab="coverage",args.legend = list(x=35,y=1,ncol=5), ylab="Frequency of true positives", font.lab=2)
werte50<-c(221/264,43/264,3555/3662,107/3662)
werte100<-c(249/288, 39/288, 7382/7596, 214/7596)
werte300<-c(280/298, 18/298, 19536/19599, 63/19599)
werte500<-c(292/300,8/300, 29987/30005, 18/30005)
werte2<-cbind(werte50, werte100,werte300, werte500)
rownames(werte2)<-c("TP", "FN", "TN", "FP")
colnames(werte2)<-c("Cov50", "Cov100", "Cov300", "Cov500")
barplot(werte2,col=brewer.pal(n = 4, name = "BuPu"), border="white", ylim=c(0,1), xlab="Coverage", font.axis=2, beside=T, legend=rownames(werte2), ylab="Frequency", font.lab=2)
legend(1,1,rownames(Werte), fill=T, horiz=T)
barplot(werte2,col=brewer.pal(n = 4, name = "BuPu"), border="white", ylim=c(0,1), xlab="Coverage", font.axis=2, beside=T, legend=rownames(werte2), ylab="Frequency", font.lab=2)
library("knitr", lib.loc="~/R/win-library/3.1")
library("markdown", lib.loc="~/R/win-library/3.1")
getwd()
setwd("C:/Users/viola/Documents/GitHub/MTBseq_source/")
render("Manual.md")
library("rmarkdown", lib.loc="~/R/win-library/3.1")
render("Manual.md")
